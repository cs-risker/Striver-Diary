/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode *c1 = l1;
        ListNode *c2 = l2;
        while(c1!=nullptr && c2!=nullptr){
            int a = c1->val;
            int b = c2->val;
            c1->val = (a + b + carry) % 10;
            if((a+b+carry)>=10){
                carry = 1;
            }else{
                carry = 0;
            }
            if(c1->next == nullptr && c2->next == nullptr) {
                if(carry == 1){
                    c1->next = new ListNode(1);
                    return l1;
                }
            }
            c1=c1->next;
            c2=c2->next;
            
        }
        if(c1!=nullptr){
            while(c1 != nullptr){
                int temp = c1->val + carry;
                c1->val = temp % 10;
                if(temp >= 10){
                    carry = 1;
                    if(c1->next == nullptr){
                        c1->next = new ListNode(1);
                        return l1;
                    }
                }else {
                    carry = 0;
                }
                c1=c1->next;
            }
            
            return l1;
        }
        if(c2!=nullptr){
            ListNode *res = l2;
            while(l2!=c2){
                l2->val = l1->val;
                l1=l1->next;
                l2=l2->next;
            }
            while(c2!=nullptr){
                int temp = c2->val + carry;
                c2->val = temp % 10;
                if(temp >= 10){
                    carry = 1;
                    if(c2->next == nullptr) {
                        c2->next = new ListNode(1);
                        return res;
                    }
                }else {
                    carry = 0;
                }
                c2=c2->next;
            }
            return res;
        }
        return l1;
    }
};
